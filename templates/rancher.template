AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template installs rancher in the EKS cluster in separate Availability Zones
  inside a VPC.  The Rancher installation creates a NLB and Route 53 domain records
  so more friendly access to the rancher URL.
  This template creates Amazon EC2 Linux instance temporarily to execute kubectl
  commands and terminates the instalce.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCCIDR
          - VPCID
          - PrivateSubnet1CIDR
          - PrivateSubnet1ID
          - PrivateSubnet2CIDR
          - PrivateSubnet2ID
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1CIDR:
        default: Public Subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      VPCCIDR:
        default: VPC CIDR
      VPCID:
        default: VPC ID
      EKSClusterName:
        default: EKS Cluster Name

Parameters:
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone 1.
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-eks-rancher/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  EKSClusterName:
    AllowedPattern: ^EKS-[0-9a-zA-Z]{8}$
    Description: EKS Cluster Name
    Type: String

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must be in the VPC
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:
  SSMAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: "*"
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ssm:GetParameters
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter//ami-amazon-linux/latest"
                Effect: Allow
          PolicyName: aws-quick-start-ssm-param-store-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
          PolicyName: aws-quick-start-cfn-signal-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - iam:getRolePolicy
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:CreateInstanceProfile
                  - iam:DeleteRole
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:PassRole
                Resource: '*'
          PolicyName: aws-quick-start-create-role-policy
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess'
  LambdaSSMRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
           Version: '2012-10-17'
           Statement:
             - Effect: Allow
               Action:
                 - iam:PassRole
               Resource: !GetAtt SSMAutomationRole.Arn
          PolicyName: QS-SSM-PassRole
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole'
  RancherInstallerSetup:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: "0.3"
        description: Setup Rancher Installer EC2 instance then terminate it after the installation is completed
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          StackName:
            description: "Stack Name Input for cfn resource signal"
            type: "String"
          VPCCIDR:
            description: VPC CIDR
            type: "String"
          QSS3BucketName:
            description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
            type: "String"
          QSS3BucketRegion:
            default: "us-east-1"
            description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
            type: "String"
          QSS3KeyPrefix:
            description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
            type: "String"
          PrivateSubnet1ID:
            description: "Private Subnet 1 ID"
            type: "String"
          AutomationAssumeRole:
            description: "(Optional) The ARN of the role that allows Automation to perform the actions on your behalf."
            type: "String"
          AWSRegion:
            description: "Region"
            type: "String"
          EKSClusterName:
            description: "EKS Cluster Name"
            type: "String"
        mainSteps:
        - name:  CreateStack
          action: aws:createStack
          onFailure: "step:CFNSignalEnd"
          inputs:
            StackName: "InstallRancher"
            Capabilities: [ "CAPABILITY_IAM" ]
            TemplateBody: |
              Description: "Deploy Instance to install Rancher"
              Parameters:
                LINUXBASE:
                  Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
                  Default: '/ami-amazon-linux/latest'
                QSS3BucketName:
                  Type: "String"
                  Default: "{{QSS3BucketName}}"
                  Description: "Name of Target S3 Bucket"
                QSS3BucketRegion:
                  Default: "us-east-2"
                  Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
                  Type: "String"
                QSS3KeyPrefix:
                  Type: "String"
                  Default: "{{QSS3KeyPrefix}}"
                  Description: "Name of Target S3 Prefix"
                Subnet:
                  Description: "Subnet to deploy the EC2 instnace"
                  Default: "{{PrivateSubnet1ID}}"
                  Type: "String"
                EKSClusterName:
                  Description: EKS Cluster Name
                  Type: "String"
                  Default: "{{EKSClusterName}}"
              Resources:
                InstallerRole: 
                  Type : AWS::IAM::Role
                  Properties:
                    Policies:
                      - PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                            - Action:
                                - s3:GetObject
                                - s3:ListBucket
                              Resource: "*"
                              Effect: Allow
                        PolicyName: s3-instance-bucket-policy
                      - PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                            - Action:
                                - route53:CreateHostedZone
                                - route53:DisassociateVPCFromHostedZone
                                - route53:GetHostedZone
                                - route53:ListHostedZones
                                - route53:ChangeResourceRecordSets
                                - route53:CreateQueryLoggingConfig
                                - route53:CreateVPCAssociationAuthorization
                                - route53:UpdateHealthCheck
                                - route53:DeleteHealthCheck
                                - route53:ListHostedZonesByName
                                - route53:DeleteVPCAssociationAuthorization
                                - route53:CreateHealthCheck
                                - route53:ListResourceRecordSets
                                - route53:DeleteHostedZone
                                - route53:AssociateVPCWithHostedZone
                                - route53:UpdateHostedZoneComment
                                - route53:DeleteQueryLoggingConfig
                                - elasticloadbalancing:DescribeLoadBalancers
                              Resource: "*"
                              Effect: Allow
                        PolicyName: r53-permission
                      - PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                            - Action:
                                - eks:DescribeCluster
                                - eks:DescribeUpdate
                                - eks:ListUpdates
                                - eks:UpdateClusterVersion
                              Resource:
                                - !Join
                                    - ''
                                    - - 'arn:aws:eks:'
                                      - !Sub ${AWS::Region}
                                      - ':'
                                      - !Sub ${AWS::AccountId}
                                      - ':cluster/'
                                      - !Ref EKSClusterName
                              Effect: Allow
                        PolicyName: eks-access
                    Path: /
                    ManagedPolicyArns:
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
                    AssumeRolePolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                      - Effect: "Allow"
                        Principal:
                          Service:
                          - "ec2.amazonaws.com"
                          - "ssm.amazonaws.com"
                        Action: "sts:AssumeRole"
                IamInstanceProfile:
                  Type: "AWS::IAM::InstanceProfile"
                  Properties:
                    Roles:
                    - !Ref InstallerRole
                EC2Instance:
                  Type: "AWS::EC2::Instance"
                  Properties:
                    ImageId: !Ref LINUXBASE
                    InstanceType: "t2.micro"
                    IamInstanceProfile: !Ref IamInstanceProfile
                    SubnetId: !Ref Subnet
                    Tags:
                    - Key: "Name"
                      Value: "TempRancherInstance"
                    UserData:
                      Fn::Base64: !Sub |
                        #cloud-config
                        repo_upgrade: none
        - name: "getInstanceId"
          action: aws:executeAwsApi
          onFailure: "step:CFNSignalEnd"
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: "tag:Name"
              Values: [ "TempRancherInstance" ]
            - Name: "instance-state-name"
              Values: [ "running" ]
          outputs:
          - Name: InstanceId
            Selector: "$.Reservations[0].Instances[0].InstanceId"
            Type: String
        - name: "DownloadAndRunRancherInstallScript"
          action: "aws:runCommand"
          onFailure: "step:signalfailure"
          inputs:
            DocumentName: "AWS-RunShellScript"
            InstanceIds:
              - "{{getInstanceId.InstanceId}}"
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: "true"
              CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
            Parameters:
              commands:
                #- wget https://eks-quickstart-lambdazips-us-east-1-740568573523.s3.amazonaws.com/rancher_install.sh
                - wget  https://eks-quickstart-lambdazips-us-east-2-626002054944.s3.us-east-2.amazonaws.com/rancher_install.sh
                - sh -x rancher_install.sh '{{global:REGION}}' '{{EKSClusterName}}'
        # Determines if CFN Needs to be Signaled or if Work flow should just end
        - name: CFNSignalEnd
          action: aws:branch
          inputs:
            Choices:
            - NextStep: signalsuccess
              Not: 
                Variable: "{{StackName}}"
                StringEquals: ""
            - NextStep: sleepend
              Variable: "{{StackName}}"
              StringEquals: ""
        # If all steps complete successfully signals CFN of Success
        - name: "signalsuccess"
          action: "aws:executeAwsApi"
          nextStep: "deleteStack"
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: SUCCESS
            UniqueId: "{{getInstanceId.InstanceId}}"
        # If CFN Signl Not Needed this sleep ends work flow
        - name: "sleepend"
          action: "aws:sleep"
          nextStep: "deleteStack"
          inputs:
            Duration: PT1S
        # If any steps fails signals CFN of Failure
        - name: "signalfailure"
          action: "aws:executeAwsApi"
          nextStep: "deleteStack"
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: "SSMWaitCondition"
            StackName: "{{StackName}}"
            Status: FAILURE
            UniqueId: "{{getInstanceId.InstanceId}}"
        - name: deleteStack
          action: aws:deleteStack
          isEnd: true
#          onFailure: Continue
          inputs:
            StackName: "InstallRancher"
  LambdaSSMExecute:
    DependsOn: LambdaSSMRole
    Type: AWS::Lambda::Function
    Properties:
      Description: Executes SSM Automation Documents
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt LambdaSSMRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          def handler(event, context):
              import cfnresponse
              import boto3, os, json
              from botocore.vendored import requests
          
              ssm_cl = boto3.client('ssm')
              ecr_cl = boto3.client('ecr')
              req_type = event['RequestType']
              print(event)
          
              SUCCESS = "SUCCESS"
              FAILED = "FAILED"
          
              def start_ssmautomation(event):
                  doc_name = event['ResourceProperties']['DocumentName']
                  stack_name = event['ResourceProperties']['StackName']
                  ssm_role = event['ResourceProperties']['AutomationAssumeRole']
                  qs_bucket = event['ResourceProperties']['QSS3BucketName']
                  qs_region = event['ResourceProperties']['QSS3BucketRegion']
                  qs_bucket_prefix = event['ResourceProperties']['QSS3KeyPrefix']
                  #security_group = event['ResourceProperties']['DomainMemberSG']
                  subnet_id = event['ResourceProperties']['PrivateSubnet1ID']
                  #key_name = event['ResourceProperties']['KeyPairName']
                  vpc_cidr = event['ResourceProperties']['VPCCIDR']
                  #directory_id = event['ResourceProperties']['DirectoryID']
                  aws_region = event['ResourceProperties']['AWSRegion']
                  #url_suffix = event['ResourceProperties']['URLSuffix']
                  eks_cluster = event['ResourceProperties']['EKSClusterName']

                  if qs_bucket == "aws-quickstart":
                    qs_bucket = "aws-quickstart-" + qs_region
          
                  start_automation = ssm_cl.start_automation_execution(
                      DocumentName= doc_name,
                      Parameters={
                          'StackName': [
                              stack_name
                          ],
                          'AutomationAssumeRole': [
                              ssm_role
                          ],
                          'QSS3BucketName': [
                              qs_bucket
                          ],
                          'QSS3BucketRegion': [
                              qs_region
                          ],
                          'QSS3KeyPrefix': [
                              qs_bucket_prefix
                          ],
                          #'DomainMemberSG': [
                          #    security_group
                          #],
                          'PrivateSubnet1ID': [
                              subnet_id
                          ],
                          #'KeyPairName': [
                          #    key_name
                          #],
                          'VPCCIDR': [
                              vpc_cidr
                          ],
                          #'DirectoryID': [
                          #    directory_id
                          #],
                          'AWSRegion': [
                              aws_region
                          ],
                          'EKSClusterName': [
                              eks_cluster
                          ]
                          #'URLSuffix': [
                          #    url_suffix
                          #]
                      },
                  )
          
                  cfnresponse.send(event, context, SUCCESS, start_automation, start_automation['AutomationExecutionId'])
              
              def delete_image(event):
                  cfnresponse.send(event, context, SUCCESS, event, "Deleted")

              actions = {
                  'Create': start_ssmautomation,
                  'Delete': delete_image,
                  'Update': start_ssmautomation
              }
          
              try:
                  actions.get(req_type)(event)    
              except Exception as exc:
                  error_msg = {'Error': '{}'.format(exc)}
                  print(error_msg)
                  cfnresponse.send(event, context, FAILED, error_msg)
  ExecuteSSMAutomation:
    DependsOn: LambdaSSMExecute
    Type: Custom::ExecuteSSMAutomation
    Properties: 
      ServiceToken: !GetAtt LambdaSSMExecute.Arn
      DocumentName: !Ref RancherInstallerSetup
      StackName: !Ref AWS::StackName
      QSS3BucketName: !Ref QSS3BucketName
      QSS3BucketRegion: !Ref QSS3BucketRegion
      QSS3KeyPrefix: !Ref QSS3KeyPrefix
      AutomationAssumeRole: !GetAtt SSMAutomationRole.Arn
      PrivateSubnet1ID: !Ref PrivateSubnet1ID
      VPCCIDR: !Ref VPCCIDR
      AWSRegion: !Ref 'AWS::Region'
      EKSClusterName: !Ref EKSClusterName
      #URLSuffix: !Ref 'AWS::URLSuffix'
  SSMWaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  SSMWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    DependsOn: 
      - ExecuteSSMAutomation
      - SSMWaitHandle
    Properties: 
      Handle: 
        Ref: "SSMWaitHandle"
      Timeout: "3600"
      Count: 1
#  AWSQuickstartADRole:
#    Type: AWS::IAM::Role
#    Properties:
#      Policies:
#        - PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Action:
#                  - s3:GetObject
#                  - s3:ListBucket
#                Resource: "*"
#                Effect: Allow
#          PolicyName: aws-quick-start-s3-policy
#        - PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - cloudformation:SignalResource
#                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
#              - Effect: Allow
#                Action:
#                  - ec2:DescribeInstances
#                  - ec2:DescribeInstanceStatus
#                  - ssm:*
#                Resource: '*'
#          PolicyName: AD-SSM-AutomationExecution
#      Path: /
#      AssumeRolePolicyDocument:
#        Statement:
#          - Action:
#              - sts:AssumeRole
#            Principal:
#              Service:
#                - ec2.amazonaws.com
#                - ssm.amazonaws.com
#            Effect: Allow
#        Version: '2012-10-17'

#Outputs:
#  ADServer1PrivateIP:
#    Value: !Select
#      - '0'
#      - !GetAtt 'MicrosoftAD.DnsIpAddresses'
#    Description: AD Server 1 Private IP Address (this may vary based on Directory
#      Service order of IP addresses)
#  ADServer2PrivateIP:
#    Value: !Select
#      - '1'
#      - !GetAtt 'MicrosoftAD.DnsIpAddresses'
#    Description: AD Server 2 Private IP Address (this may vary based on Directory
#      Service order of IP addresses)
#  DirectoryID:
#    Value: !Ref 'MicrosoftAD'
#    Description: Directory Services ID
#  DomainAdmin:
#    Value: !Join
#      - ''
#      - - !Ref 'DomainNetBIOSName'
#        - \admin
#    Description: Domain administrator account
#  DomainMemberSGID:
#    Value: !Ref 'DomainMemberSG'
#    Description: Domain Member Security Group ID
#  ADSecretsArn:
#    Value: !Ref 'ADAdminSecrets'
#    Description: Managed AD Admin Secrets
